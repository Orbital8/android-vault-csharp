// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Orbital 8 Pty Ltd" file="KeychainAuthenticatedKeyStorage.cs">
//   Copyright (c) 2017 Orbital 8 Pty Ltd. All rights reserved.
// </copyright>
// <datecreated>2016-09-20</datecreated>
// --------------------------------------------------------------------------------------------------------------------
//
// Ported to Xamarin Android / C# from https://github.com/BottleRocketStudios/Android-Vault 
// developed by Bottle Rocket LLC (http://www.bottlerocketstudios.com/).

#region Namespaces

using Android.Content;
using Android.Runtime;
using Android.Security.Keystore;
using Android.Util;
using Java.IO;
using Java.Lang;
using Java.Security;
using Java.Security.Cert;
using Javax.Crypto;

#endregion

namespace O8.Mobile.Droid.Vault.Keys.Storage
{
    /// <summary>
    ///     Use Android Keystore to keep the SecretKey. Requires user authentication to be enabled and
    ///     requires re-authentication at specified intervals.
    /// </summary>
    public class KeychainAuthenticatedKeyStorage : IKeyStorage
    {
        private const string Tag = "O8.Mobile.Droid.Vault.Keys.Storage.KeychainAuthenticatedKeyStorage";
        private readonly string _algorithm;
        private readonly int _authDurationSeconds;
        private readonly string _blockMode;

        private readonly string _keyAlias;

        private readonly object _keyLock = new object();
        private readonly string _padding;

        public KeychainAuthenticatedKeyStorage(string keyAlias, string algorithm, string blockMode, string padding, int authDurationSeconds)
        {
            _keyAlias = keyAlias;
            _algorithm = algorithm;
            _blockMode = blockMode;
            _padding = padding;
            _authDurationSeconds = authDurationSeconds;
        }

        public ISecretKey LoadKey(Context context)
        {
            ISecretKey secretKey = null;

            lock (_keyLock)
            {
                try
                {
                    var keyStore = KeyStore.GetInstance(EncryptionConstants.AndroidKeyStore);
                    keyStore.Load(null);

                    secretKey = keyStore.GetKey(_keyAlias, null).JavaCast<ISecretKey>();
                }
                catch (KeyStoreException e)
                {
                    Log.Error(Tag, "Caught java.security.KeyStoreException", e);
                }
                catch (CertificateException e)
                {
                    Log.Error(Tag, "Caught java.security.cert.CertificateException", e);
                }
                catch (NoSuchAlgorithmException e)
                {
                    Log.Error(Tag, "Caught java.security.NoSuchAlgorithmException", e);
                }
                catch (IOException e)
                {
                    Log.Error(Tag, "Caught java.io.IOException", e);
                }
                catch (UnrecoverableKeyException e)
                {
                    Log.Error(Tag, "Caught java.security.UnrecoverableKeyException", e);
                }
            }

            return secretKey;
        }

        public bool SaveKey(Context context, ISecretKey secretKey)
        {
            if (secretKey != null)
            {
                throw new IllegalArgumentException(
                    "Cannot be manually keyed. The key is generated by the Keystore itself. The argument secretKey must be null.");
            }

            return AutomaticallyCreateKey();
        }

        public void ClearKey(Context context)
        {
            lock (_keyLock)
            {
                try
                {
                    var keyStore = KeyStore.GetInstance(EncryptionConstants.AndroidKeyStore);
                    keyStore.Load(null);
                    keyStore.DeleteEntry(_keyAlias);
                }
                catch (KeyStoreException e)
                {
                    Log.Error(Tag, "Caught java.security.KeyStoreException", e);
                }
                catch (CertificateException e)
                {
                    Log.Error(Tag, "Caught java.security.cert.CertificateException", e);
                }
                catch (NoSuchAlgorithmException e)
                {
                    Log.Error(Tag, "Caught java.security.NoSuchAlgorithmException", e);
                }
                catch (IOException e)
                {
                    Log.Error(Tag, "Caught java.io.IOException", e);
                }
            }
        }

        public bool HasKey(Context context)
        {
            lock (_keyLock)
            {
                try
                {
                    var keyStore = KeyStore.GetInstance(EncryptionConstants.AndroidKeyStore);
                    keyStore.Load(null);
                    return keyStore.ContainsAlias(_keyAlias);
                }
                catch (KeyStoreException e)
                {
                    Log.Error(Tag, "Caught java.security.KeyStoreException", e);
                }
                catch (CertificateException e)
                {
                    Log.Error(Tag, "Caught java.security.cert.CertificateException", e);
                }
                catch (NoSuchAlgorithmException e)
                {
                    Log.Error(Tag, "Caught java.security.NoSuchAlgorithmException", e);
                }
                catch (IOException e)
                {
                    Log.Error(Tag, "Caught java.io.IOException", e);
                }
            }

            return false;
        }

        public KeyStorageType KeyStorageType
        {
            get { return KeyStorageType.AndroidKeystoreAuthenticated; }
        }

        private bool AutomaticallyCreateKey()
        {
            lock (_keyLock)
            {
                try
                {
                    var keyStore = KeyStore.GetInstance(EncryptionConstants.AndroidKeyStore);
                    keyStore.Load(null);

                    var keyGenerator = KeyGenerator.GetInstance(_algorithm, EncryptionConstants.AndroidKeyStore);
                    keyGenerator.Init(
                        new KeyGenParameterSpec.Builder(_keyAlias, KeyStorePurpose.Encrypt | KeyStorePurpose.Decrypt).SetBlockModes(_blockMode)
                            .SetUserAuthenticationRequired(true)
                            .SetUserAuthenticationValidityDurationSeconds(_authDurationSeconds)
                            .SetEncryptionPaddings(_padding)
                            .Build());

                    return keyGenerator.GenerateKey() != null;
                }
                catch (KeyStoreException e)
                {
                    Log.Error(Tag, "Caught java.security.KeyStoreException", e);
                }
                catch (CertificateException e)
                {
                    Log.Error(Tag, "Caught java.security.cert.CertificateException", e);
                }
                catch (NoSuchAlgorithmException e)
                {
                    Log.Error(Tag, "Caught java.security.NoSuchAlgorithmException", e);
                }
                catch (InvalidAlgorithmParameterException e)
                {
                    Log.Error(Tag, "Caught java.security.InvalidAlgorithmParameterException", e);
                }
                catch (NoSuchProviderException e)
                {
                    Log.Error(Tag, "Caught java.security.NoSuchProviderException", e);
                }
                catch (IOException e)
                {
                    Log.Error(Tag, "Caught java.io.IOException", e);
                }
            }

            return false;
        }
    }
}